# 補完機ddc.vim'
[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_post_source = '''
    call ddc#custom#patch_global('ui','native')
    call ddc#custom#patch_global('sources',['nvim-lsp','around'])
    call ddc#custom#patch_global('sourceOptions',{
        \ '_': {
        \ 'matchers': ['matcher_head'],
        \ 'sorters': ['sorter_rank'],
        \ },
        \ 'around': {
        \ 'mark': 'around'
        \ },
        \ 'nvim-lsp': {
        \ 'mark': 'lsp',
        \ 'forceCompletionPattern': '\.\w*|:\w*|->\w*',
        \ },
        \ })
    call ddc#enable()

    " <TAB>/<S-TAB> completion.
    inoremap <silent><expr> <TAB>
        \ pumvisible() ? '<C-n>' :
        \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.')-2] =~# '\s') ?
        \ '<TAB>' : ddc#map#manual_complete()
    inoremap <expr><S-TAB> pumvisible() ? '<C-p>' : '<C-h>'
'''

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

# Built-in LSP の補完をddc で利用する
# 言語サーバーのインストール状況の確認は:Mason
# python は pyright を利用
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
hook_source = '''
lua << EOF
local mason = require('mason')
mason.setup({
    ui = {
        icons = {
            package_installed = "v",
            package_pending = ">>",
            package_uninstalled = "x"
        }
    }
})
local nvim_lsp = require('lspconfig')

local mason_lspconfig = require('mason-lspconfig')
mason_lspconfig.setup_handlers({ function(server_name)
    local opts = {}
    opts.on_attach = function(_, bufnr)
        local bufopts = { silent = true, buffer = bufnr }
    end
    nvim_lsp[server_name].setup(opts)
end}) 
-- nvim_lsp.sumneko_lua.setup{
--         cmd = { "/path/to/lua-language-server/bin/Linux/lua-language-server", "-E", "/path/to/lua-language-server/main.lua" }
--     }
EOF
'''

[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'
hook_post_source = '''
lua << EOF
require('mason-lspconfig').setup({
        ensure_installed = {
                'pyright',
                'lua_ls',
            }
    })
require('lspconfig').pyright.setup({})
require('lspconfig').lua_ls.setup({})
EOF
'''

# lsp による補完
[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'

[[plugins]]
repo = 'hrsh7th/cmp-buffer'

[[plugins]]
repo = 'hrsh7th/cmp-path'

[[plugins]]
repo = 'hrsh7th/cmp-cmdline'

[[plugins]]
repo = 'hrsh7th/nvim-cmp'
hook_post_source = '''
lua << EOF
-- Set up nvim-cmp.
local cmp = require("cmp")
cmp.setup({
	snippet = {
		expand = function(args)
			vim.fn["vsnip#anonymous"](args.body)
		end,
	},
	window = {
		completion = cmp.config.window.bordered(),
		documentation = cmp.config.window.bordered(),
	},
	mapping = cmp.mapping.preset.insert({
		[""] = cmp.mapping.scroll_docs(-4),
		[""] = cmp.mapping.scroll_docs(4),
		[""] = cmp.mapping.complete(),
		[""] = cmp.mapping.abort(),
		[""] = cmp.mapping.confirm({ select = true }),
	}),
	sources = cmp.config.sources({
		{ name = "nvim_lsp" },
		{ name = "vsnip" },
	}, {
		{ name = "buffer" },
	}),
}) 
EOF
'''

[[plugins]]
repo = 'onsails/lspkind.nvim'
hook_post_source = '''
lua << EOF
-- Set up lspkind.
local lspkind = require("lspkind")
cmp.setup({
	formatting = {
		format = lspkind.cmp_format({
			mode = "symbol",
			maxwidth = 50,
			ellipsis_char = "...",
			before = function(entry, vim_item)
				return vim_item
			end,
		}),
	},
})
EOF
'''

# リンターとフォーマッターの設定
[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
depends = ['plenary.nvim']
hook_post_source = '''
lua << EOF
local null_ls = require("null-ls")
null_ls.setup({
    sources = {
        null_ls.builtins.formatting.black, -- python formatter
        null_ls.builtins.formatting.isort, -- python import sort
        null_ls.builtins.diagnostics.flake8, -- python linter
        null_ls.builtins.formatting.stylua, -- lua formatter
        null_ls.builtins.diagonostics.luacheck, -- lua linter
    }
})
EOF
'''

# 選択中のテキストをかっこなどでくくる
[[plugins]]
repo = 'machakann/vim-sandwich'

# マークダウンに関する設定
# マークダウンのプレビュー
# [[plugins]]
# repo = 'skanehira/preview-markdown.vim'
# hook_post_source = '''
#     let g:preview_markdown_auto_update = 1
#     let g:preview_markdown_vertical = 1
# '''

[[plugins]]
repo = 'kat0h/bufpreview.vim'
build = 'deno task prepare'

# マークダウンのテーブル作成
[[plugins]]
repo = 'mattn/vim-maketable'

# コメント化
[[plugins]]
repo = 'tpope/vim-commentary'

